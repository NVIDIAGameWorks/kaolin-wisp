#!/usr/bin/env groovy

docker_registry_server = ImageTag.split(':')[0..1].join(':')
currentBuild.displayName = ImageTag.split(':')[2] + "-${arch}"
currentBuild.description = sourceBranch + ": " + commitHash

podTemplate(
cloud:'sc-ipp-blossom-prod',
yaml:"""
apiVersion: v1
kind: Pod
spec:
  volumes:
  - name: pvc-mount
    persistentVolumeClaim:
      claimName: 'kaolin-wisp-pvc'
  containers:
  - name: docker
    image: ${imageTag}
    command:
    - cat
    resources: 
        requests:
          nvidia.com/gpu: 1
        limits:
          nvidia.com/gpu: 1
    tty: true
    volumeMounts:
      - mountPath: /data
        name: pvc-mount
  imagePullSecrets:
  - name: gitlabregcred2
  nodeSelector:
    kubernetes.io/os: linux
    nvidia.com/gpu_type: ${arch}
""") {
  node(POD_LABEL) {
    container("docker") {
      updateGitlabCommitStatus(name: "test-${configName}-${arch}", state: 'running')
      def build_passed = true
      // Display some info
      try {
        timeout(time: 10, unit: 'SECONDS') {
            stage('Disp info') {
              sh 'nvidia-smi'
              sh 'python --version'
            }
        }
      } catch(e) {
        build_passed = false
        echo e.toString()
      }
      // Train NeRF with octree
      try {
        timeout(time: 260, unit: 'SECONDS') {
            stage("NeRF-octree rtmv") {
              sh '''
              cd /wisp
              WISP_HEADLESS=1 python app/nerf/main_nerf.py --config=app/nerf/configs/nerf_octree.yaml --dataset-path=/data/V8 --multiview-dataset-format rtmv --mip 2 --bg-color white --num-rays-sampled-per-img 4096 --raymarch-type voxel --num-steps 16
              '''
            }
        }
      } catch(e) {
        build_passed = false
        echo e.toString()
      }
      try {
        timeout(time: 420, unit: 'SECONDS') {
            stage("NeRF-octree standard") {
              sh '''
              cd /wisp
              WISP_HEADLESS=1 python app/nerf/main_nerf.py --config=app/nerf/configs/nerf_octree.yaml --dataset-path=/data/lego
              '''
            }
        }
      } catch(e) {
        build_passed = false
        echo e.toString()
      }
      // Train NeRF with triplanar feature maps
      try {
        timeout(time: 325, unit: 'SECONDS') {
            stage("NeRF-triplanar rtmv") {
              sh '''
              cd /wisp
              WISP_HEADLESS=1 python app/nerf/main_nerf.py --config=app/nerf/configs/nerf_triplanar.yaml --dataset-path=/data/V8 --multiview-dataset-format rtmv --mip 2 --bg-color white --num-rays-sampled-per-img 4096 --raymarch-type voxel --num-steps 16
              '''
            }
        }
      } catch(e) {
        build_passed = false
        echo e.toString()
      }
      // Train NeRF with VQAD
      try {
        timeout(time: 400, unit: 'SECONDS') {
            stage("NeRF-codebook rtmv") {
              sh '''
              cd /wisp
              WISP_HEADLESS=1 python app/nerf/main_nerf.py --config=app/nerf/configs/nerf_codebook.yaml --dataset-path=/data/V8 --multiview-dataset-format rtmv --mip 2 --bg-color white --num-rays-sampled-per-img 4096 --raymarch-type voxel --num-steps 16
              '''
            }
        }
      } catch(e) {
        build_passed = false
        echo e.toString()
      }

      // Train NeRF with VQAD
      try {
        timeout(time: 130, unit: 'SECONDS') {
            stage("NeRF-hash standard-synthetic") {
              sh '''
              cd /wisp
              WISP_HEADLESS=1 python app/nerf/main_nerf.py --config=app/nerf/configs/nerf_hash.yaml --dataset-path=/data/lego
              '''
            }
        }
      } catch(e) {
        build_passed = false
        echo e.toString()
      }
      try {
        timeout(time: 260, unit: 'SECONDS') {
            stage("NeRF-hash standard-180") {
              sh '''
              cd /wisp
              WISP_HEADLESS=1 python app/nerf/main_nerf.py --config=app/nerf/configs/nerf_hash.yaml --dataset-path=/data/fox
              '''
            }
        }
      } catch(e) {
        build_passed = false
        echo e.toString()
      }
      // Train NGLOD
      try {
        timeout(time: 140, unit: 'SECONDS') {
            stage("SDF-octree") {
              sh '''
              cd /wisp
              WISP_HEADLESS=1 python app/nglod/main_nglod.py --config=app/nglod/configs/nglod_octree.yaml --dataset-path=/data/spot/spot_triangulated.obj
              '''
            }
        }
      } catch(e) {
        build_passed = false
        echo e.toString()
      }
      // Train SDFs with triplanar feature maps
      try {
        timeout(time: 325, unit: 'SECONDS') {
            stage("SDF-triplanar") {
              sh '''
              cd /wisp
              WISP_HEADLESS=1 python app/nglod/main_nglod.py --config=app/nglod/configs/nglod_triplanar.yaml --dataset-path=/data/spot/spot_triangulated.obj
              '''
            }
        }
      } catch(e) {
        build_passed = false
        echo e.toString()
      }
      // Train SDFs with hash grid
      try {
        timeout(time: 325, unit: 'SECONDS') {
            stage("SDF-hash") {
              sh '''
              cd /wisp
              WISP_HEADLESS=1 python app/nglod/main_nglod.py --config=app/nglod/configs/nglod_hash.yaml --dataset-path=/data/spot/spot_triangulated.obj
              '''
            }
        }
      } catch(e) {
        build_passed = false
        echo e.toString()
      }

      if (build_passed) {
          updateGitlabCommitStatus(name: "test-${configName}-${arch}", state: 'success')
          currentBuild.result = "SUCCESS"
      } else {
          updateGitlabCommitStatus(name: "test-${configName}-${arch}", state: 'failed')
          currentBuild.result = "FAILURE"
      }
    }
  }
}
